{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/home/home.component.css","webpack:///./src/app/components/home/home.component.html","webpack:///./src/app/components/home/home.component.ts","webpack:///./src/app/components/register-page/register-page.component.css","webpack:///./src/app/components/register-page/register-page.component.html","webpack:///./src/app/components/register-page/register-page.component.ts","webpack:///./src/app/services/user-store.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { RegisterPageComponent } from './components/register-page/register-page.component';\nimport { HomeComponent } from './components/home/home.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: '/register',\n    pathMatch: 'full'\n  },\n  {\n    path: 'home',\n    component: HomeComponent\n  },\n  {\n    path: 'register',\n    component: RegisterPageComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n  <h1>\\n    Welcome to {{ title }}!\\n  </h1>\\n<router-outlet></router-outlet>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'tandem-frontend';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { UserStoreService } from './services/user-store.service';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RegisterPageComponent } from './components/register-page/register-page.component';\nimport { HomeComponent } from './components/home/home.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    RegisterPageComponent,\n    HomeComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    ReactiveFormsModule\n  ],\n  providers: [\n    UserStoreService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvaG9tZS9ob21lLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<!-- show all users who are saved in the Array of 'users'-->\\n<div *ngFor=\\\"let user of users\\\">\\n  <div>Firstname: <b>{{ user.firstname }}</b>\\n  </div>\\n\\n  <div>\\n    Lastname: <b>{{ user.lastname }}</b>\\n  </div>\\n\\n  <div>Mail:  <b>{{ user.mail }}</b>\\n  </div>\\n  <hr>\\n</div>\\n\\n<form class=\\\"border\\\" [formGroup]=\\\"editForm\\\" (ngSubmit)=\\\"editFormSave('SkcGljXTpsua8zq5aS9F')\\\">\\n  <label>Firstname:</label>\\n  <input type=\\\"text\\\" id=\\\"editFormFirstname\\\" formControlName=\\\"editFormFirstname\\\">\\n\\n  <label>Lastname:</label>\\n  <input type=\\\"text\\\" id=\\\"editFormLastname\\\" formControlName=\\\"editFormLastname\\\">\\n\\n  <label>Mail:</label>\\n  <input type=\\\"text\\\" id=\\\"editFormMail\\\" formControlName=\\\"editFormMail\\\">\\n\\n  <button type=\\\"button\\\" type=\\\"submit\\\">Änderunge speichern</button>\\n</form>\\n\"","import { UserStoreService } from 'src/app/services/user-store.service';\nimport { Component, OnInit } from '@angular/core';\nimport { User } from 'src/app/models/user';\nimport { Validators, FormGroup, FormBuilder } from '@angular/forms';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  users: User[];\n  user: User;\n  editForm: FormGroup;\n\n  constructor(\n    private userStoreService: UserStoreService,\n    private formBuilder: FormBuilder,\n    ) {\n    // mapping the editForm on the initialzied formgroup\n    this.editForm = this.createEditFormGroup();\n    }\n\n  // when home-component was called, the written methods in ngOnInit gonna start\n  ngOnInit() {\n    this.showAllUsers();\n    this.showUserById('SkcGljXTpsua8zq5aS9F');\n  }\n\n  // get all users inkl. their attributes\n  showAllUsers() {\n    this.userStoreService.getAllUsers().subscribe((recievedUsers: User[]) => {\n      this.users = recievedUsers;\n    });\n  }\n\n  // get the user's data from the API\n  showUserById(id: string) {\n    this.userStoreService.getUserById(id).subscribe((recievedUser: User) => {\n      this.user = recievedUser;\n      this.editForm.get('editFormFirstname').setValue(this.user.firstname);\n      this.editForm.get('editFormLastname').setValue(this.user.lastname);\n      this.editForm.get('editFormMail').setValue(this.user.mail);\n    });\n  }\n\n   // create the formGroup\n  createEditFormGroup() {\n     return this.formBuilder.group ({\n      editFormFirstname: ['', Validators.required],\n\n      editFormLastname: ['', Validators.required],\n\n      editFormMail: ['', Validators.required],\n    });\n  }\n\n  // when submit Button was clicked, this method gonna start\n  editFormSave(id: string) {\n    // mapping the input's data to the specific user attribute\n    const user: User = {\n      firstname: this.editForm.value.editFormFirstname,\n      lastname: this.editForm.value.editFormLastname,\n      mail: this.editForm.value.editFormMail\n    };\n    // reset the formgroup\n    this.editForm.reset();\n    // update the user\n    this.userStoreService.updateUser(id, user).subscribe(() => {\n      // when updating method is finished call the next methods for refreshing the showed data\n      this.showAllUsers();\n      this.showUserById('SkcGljXTpsua8zq5aS9F');\n    });\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcmVnaXN0ZXItcGFnZS9yZWdpc3Rlci1wYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<form class=\\\"border\\\" [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"registerFormSave()\\\">\\n  <label>Firstname:</label>\\n  <input type=\\\"text\\\" id=\\\"registerFormFirstname\\\" formControlName=\\\"registerFormFirstname\\\">\\n\\n  <label>Lastname:</label>\\n  <input type=\\\"text\\\" id=\\\"registerFormLastname\\\" formControlName=\\\"registerFormLastname\\\">\\n\\n  <label>Mail:</label>\\n  <input type=\\\"text\\\" id=\\\"registerFormMail\\\" formControlName=\\\"registerFormMail\\\">\\n\\n  <button type=\\\"button\\\" type=\\\"submit\\\">Speichern</button>\\n</form>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Validators, FormGroup, FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { UserStoreService } from 'src/app/services/user-store.service';\nimport { User } from 'src/app/models/user';\n\n@Component({\n  selector: 'app-register-page',\n  templateUrl: './register-page.component.html',\n  styleUrls: ['./register-page.component.css']\n})\nexport class RegisterPageComponent implements OnInit {\n\n  registerForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder,\n              private router: Router,\n              private userStoreService: UserStoreService) {\n\n              this.registerForm = this.createRegisterForm();\n  }\n\n  ngOnInit() {\n  }\n\n  createRegisterForm() {\n    // create the formGroup\n    return this.formBuilder.group ({\n      registerFormFirstname: ['', Validators.required],\n\n      registerFormLastname: ['', Validators.required],\n\n      registerFormMail: ['', Validators.required],\n    });\n  }\n\n  registerFormSave() {\n    // get data from the inputfields\n    const user: User = {\n      firstname: this.registerForm.value.registerFormFirstname,\n      lastname: this.registerForm.value.registerFormLastname,\n      mail: this.registerForm.value.registerFormMail\n    };\n\n    // insert new user\n    this.userStoreService.createUser(user).subscribe(() => {\n    // then go to page 'home'\n      this.router.navigate(['/home']);\n    });\n  }\n\n  // getter for the inputfields\n  get registerFormFirstname() {\n    return this.registerForm.get('registerFormFirstname');\n  }\n\n  get registerFormLastname() {\n    return this.registerForm.get('registerFormLastname');\n  }\n\n  get registerFormMail() {\n    return this.registerForm.get('registerFormMail');\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { User } from '../models/user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserStoreService {\n\n  private apiUrl = 'https://us-central1-experimentaltandem.cloudfunctions.net/app';\n  private headers: Headers = new Headers();\n\n  constructor(private http: HttpClient) {\n    this.headers.append('Content-Type', 'application/json');\n   }\n\n   getAllUsers() {\n     return this.http.get(`${this.apiUrl}/users`);\n   }\n\n\n   getUserById(id: string) {\n     return this.http.get(`${this.apiUrl}/users/${id}`);\n   }\n\n   createUser(user: User) {\n     // generate new API-User\n     const data = {\n       firstname: user.firstname,\n       lastname: user.lastname,\n       mail: user.mail\n     };\n\n     return this.http.post(`${this.apiUrl}/users`, data);\n   }\n\n   updateUser(id: any, user: User) {\n    const data = {\n      firstname: user.firstname,\n      lastname: user.lastname,\n      mail: user.mail\n    };\n\n    return this.http.put(`${this.apiUrl}/users/${id}`, data);\n  }\n\n  public deleteUser(id: any) {\n    return this.http.delete(`${this.apiUrl}/users/${id}`);\n  }\n\n  private errorHandler(error: Error | any) {\n    return Observable.throw(error);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}